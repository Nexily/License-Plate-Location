#include<iostream>
#include<opencv2/opencv.hpp>

using namespace std;
using namespace cv;

int main(){

	Mat Img = imread("1.jpeg");
	
	Mat RGBImg;
	inRange(Img, Scalar(120, 10, 0),Scalar(240, 110, 70), RGBImg);
	
	Mat OriImg; 
	Mat element = getStructuringElement(MORPH_RECT, Size(3, 3)); 
	dilate(RGBImg, OriImg, element); 
	dilate(OriImg, OriImg, element);
	dilate(OriImg, OriImg, element);
	dilate(OriImg, OriImg, element);
	dilate(OriImg, OriImg, element);

	erode(OriImg, OriImg, element);
	erode(OriImg, OriImg, element);     
	erode(OriImg, OriImg, element);
	erode(OriImg, OriImg, element);
	erode(OriImg, OriImg, element);

	Mat edge;
	Canny(OriImg, edge, 100, 250, 3, false);

	dilate(edge, OriImg, element);
	erode(OriImg, edge, element);
	
	vector<vector<Point>>contours;
	findContours(edge,contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE);

	vector<vector<Point>>new_contours;
	for (int i = 0; i < contours.size(); i++) {

		double area = contourArea(contours[i]);
		if (area < 1800) {
			continue;
		}

		RotatedRect box = minAreaRect(contours[i]);
		vector<Point2f>box_points(4);

		box.points(box_points.data());
		for (int j = 0;j < 4;j++) {
			line(Img, box_points[j], box_points[(j + 1) % 4], Scalar(0, 0, 255), 4);
		}

		new_contours.emplace_back(contours[i]);
	}

	namedWindow("Img", 0);
	resizeWindow("Img", Img.size() / 6);
	imshow("Img", Img);

	waitKey(0);
	return 0;
}
